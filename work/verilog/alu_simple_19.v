/*
   This file was generated automatically by Alchitry Labs version 1.1.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_simple_19 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_cmp_out;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  hex_cmp_23 cmp (
    .alufn(alufn),
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .out(M_cmp_out)
  );
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  hex_add_24 add (
    .alufn(alufn),
    .a(a),
    .b(b),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  wire [16-1:0] M_boole_out;
  hex_boole_25 boole (
    .alufn(alufn),
    .a(a),
    .b(b),
    .out(M_boole_out)
  );
  wire [16-1:0] M_shift_out;
  hex_shift_26 shift (
    .alufn(alufn),
    .a(a),
    .b(b),
    .out(M_shift_out)
  );
  
  always @* begin
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
    M_cmp_z = M_add_z;
    M_cmp_v = M_add_v;
    M_cmp_n = M_add_n;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_add_out;
      end
      2'h1: begin
        alu = M_boole_out;
      end
      2'h2: begin
        alu = M_shift_out;
      end
      2'h3: begin
        alu = M_cmp_out;
      end
      default: begin
        alu = 16'h0000;
      end
    endcase
  end
endmodule
