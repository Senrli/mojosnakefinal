module verilog_keyboard_6(clk,rst_n,ps2k_clk,ps2k_data,ps2_state, ps2_byte);
 
input clk;		//50Mæ—¶é’Ÿä¿¡å?·
input rst_n;	//å¤?ä½?ä¿¡å?·
input ps2k_clk;	//PS2æŽ¥å?£æ—¶é’Ÿä¿¡å?·
input ps2k_data;		//PS2æŽ¥å?£æ•°æ?®ä¿¡å?·
output wire [7:0] ps2_byte;	// 1byteé”®å€¼ï¼Œå?ªå?šç®€å?•çš„æŒ‰é”®æ‰«æ??
output ps2_state;		//é”®ç›˜å½“å‰?çŠ¶æ€?ï¼Œps2_state=1è¡¨ç¤ºæœ‰é”®è¢«æŒ‰ä¸‹ 


//------------------------------------------
reg ps2k_clk_r0,ps2k_clk_r1,ps2k_clk_r2;	//ps2k_clkçŠ¶æ€?å¯„å­˜å™¨
//wire pos_ps2k_clk; 	// ps2k_clkä¸Šå?‡æ²¿æ ‡å¿—ä½?
wire neg_ps2k_clk;	// ps2k_clkä¸‹é™?æ²¿æ ‡å¿—ä½?
//è®¾å¤‡å?‘é€?å?‘ä¸»æœºçš„æ•°æ?®åœ¨ä¸‹é™?æ²¿æœ‰æ•ˆï¼Œé¦–å…ˆæ£€æµ‹PS2k_clkçš„ä¸‹é™?æ²¿
//åˆ©ç”¨ä¸Šé?¢é€»è¾‘èµ‹å€¼è¯­å?¥å?¯ä»¥æ??å?–å¾—ä¸‹é™?æ²¿ï¼Œneg_ps2k_clkä¸ºé«˜ç”µå¹³æ—¶è¡¨ç¤ºæ•°æ?®å?¯ä»¥è¢«é‡‡é›†
always @ (posedge clk or negedge rst_n) begin
	if(!rst_n) begin
			ps2k_clk_r0 <= 1'b0;
			ps2k_clk_r1 <= 1'b0;
			ps2k_clk_r2 <= 1'b0;
		end
	else begin								//é”?å­˜çŠ¶æ€?ï¼Œè¿›è¡Œæ»¤æ³¢
			ps2k_clk_r0 <= ps2k_clk;
			ps2k_clk_r1 <= ps2k_clk_r0;
			ps2k_clk_r2 <= ps2k_clk_r1;
		end
end
 
assign neg_ps2k_clk = ~ps2k_clk_r1 & ps2k_clk_r2;	//ä¸‹é™?æ²¿
 
//-----------------æ•°æ?®é‡‡é›†-------------------------
	/*
	å¸§ç»“æž„ï¼šè®¾å¤‡å?‘å¾€ä¸»æœºæ•°æ?®å¸§ä¸º11æ¯”ç‰¹ï¼Œï¼ˆä¸»æœºå?‘é€?æ•°æ?®åŒ…ä¸º12bitï¼‰ 
			1bit start bit ,This is always 0,
			 8dit data bits, 
			 1 parity bit,(odd parity)æ ¡éªŒä½?ï¼Œå¥‡æ ¡éªŒï¼Œ
			 data bits ä¸ºå?¶æ•°ä¸ª1æ—¶è¯¥ä½?ä¸º1ï¼Œ
			 data bits ä¸ºå¥‡æ•°ä¸ª1æ—¶è¯¥ä½?ä¸º0.
	         1bit stop bit ,this is always 1.
				num èŒƒå›´ä¸º 'h00,'h0A;
	*/
reg[7:0] ps2_byte_r;		//PCæŽ¥æ”¶æ?¥è‡ªPS2çš„ä¸€ä¸ªå­—èŠ‚æ•°æ?®å­˜å‚¨å™¨
reg[7:0] temp_data;			//å½“å‰?æŽ¥æ”¶æ•°æ?®å¯„å­˜å™¨
reg[3:0] num;				//è®¡æ•°å¯„å­˜å™¨
 
always @ (posedge clk or negedge rst_n) begin
	if(!rst_n) begin
			num <= 4'd0;
			temp_data <= 8'd0;
		end
	else if(neg_ps2k_clk) begin	//æ£€æµ‹åˆ°ps2k_clkçš„ä¸‹é™?æ²¿
			case (num)
			 /*
		å¸§ç»“æž„ä¸­æ•°æ?®ä½?ä¸ºä¸€ä¸ªå­—èŠ‚ï¼Œä¸”ä½Žä½?åœ¨å‰?ï¼Œé«˜ä½?åœ¨å?Žï¼Œ
		è¿™é‡Œè¦?å®šä¹‰ä¸€ä¸ªbuf,size is one Byte.
	 */   
				4'd0:	num <= num+1'b1;
				4'd1:	begin
							num <= num+1'b1;
							temp_data[0] <= ps2k_data;	//bit0
						end
				4'd2:	begin
							num <= num+1'b1;
							temp_data[1] <= ps2k_data;	//bit1
						end
				4'd3:	begin
							num <= num+1'b1;
							temp_data[2] <= ps2k_data;	//bit2
						end
				4'd4:	begin
							num <= num+1'b1;
							temp_data[3] <= ps2k_data;	//bit3
						end
				4'd5:	begin
							num <= num+1'b1;
							temp_data[4] <= ps2k_data;	//bit4
						end
				4'd6:	begin
							num <= num+1'b1;
							temp_data[5] <= ps2k_data;	//bit5
						end
				4'd7:	begin
							num <= num+1'b1;
							temp_data[6] <= ps2k_data;	//bit6
						end
				4'd8:	begin
							num <= num+1'b1;
							temp_data[7] <= ps2k_data;	//bit7
						end
				4'd9:	begin
							num <= num+1'b1;	//å¥‡å?¶æ ¡éªŒä½?ï¼Œä¸?å?šå¤„ç?†
						end
				4'd10: begin
							num <= 4'd0;	// numæ¸…é›¶
						end
				default: ;
				endcase
		end	
end
 
reg key_f0;		//æ?¾é”®æ ‡å¿—ä½?ï¼Œç½®1è¡¨ç¤ºæŽ¥æ”¶åˆ°æ•°æ?®8'hf0ï¼Œå†?æŽ¥æ”¶åˆ°ä¸‹ä¸€ä¸ªæ•°æ?®å?Žæ¸…é›¶
reg ps2_state_r;	//é”®ç›˜å½“å‰?çŠ¶æ€?ï¼Œps2_state_r=1è¡¨ç¤ºæœ‰é”®è¢«æŒ‰ä¸‹ 
//+++++++++++++++æ•°æ?®å¤„ç?†å¼€å§‹++++++++++++++++=============
always @ (posedge clk or negedge rst_n) begin	//æŽ¥æ”¶æ•°æ?®çš„ç›¸åº”å¤„ç?†ï¼Œè¿™é‡Œå?ªå¯¹1byteçš„é”®å€¼è¿›è¡Œå¤„ç?†
	if(!rst_n) begin
			key_f0 <= 1'b0;
			ps2_state_r <= 1'b0;
		end
	else if(num==4'd10) ///ä¸€å¸§æ•°æ?®æ˜¯å?¦é‡‡é›†å®Œã€‚
			begin	//åˆšä¼ é€?å®Œä¸€ä¸ªå­—èŠ‚æ•°æ?®
					if(temp_data == 8'hf0) key_f0 <= 1'b1;//åˆ¤æ–­è¯¥æŽ¥æ”¶æ•°æ?®æ˜¯å?¦ä¸ºæ–­ç ?
				else
					begin
					//========================ç?†è§£å›°éš¾==================================
						if(!key_f0) 
								begin	//è¯´æ˜Žæœ‰é”®æŒ‰ä¸‹
									ps2_state_r <= 1'b1;
									ps2_byte_r <= temp_data;	//é”?å­˜å½“å‰?é”®å€¼
								end
						else 
								begin
									ps2_state_r <= 1'b0;
									key_f0 <= 1'b0;
								end
					//=====================================================
					end
			end
end
/*+++++++++++++ç­‰æ•ˆå†™æ³•+++++++++++++++++++++++++++++
reg key_released;//æ”¶åˆ°ç ?æ®µå?Žæ˜¯å?¦æ?¾å¼€
reg [7:0] ps2_byte;
always @(posedge clk or negedge rst)
begin
	if(!rst)
	 key_released<='b0;
	else if(cnt=='h0A)//ä¸€å¸§æ•°æ?®æ˜¯å?¦é‡‡é›†å®Œã€‚
		begin
			if(ps2_byte_buf==8'hF0)//æ•°æ?®ä¸ºæ®µç ?f0
				key_released<='b1;//æ?¾å¼€æ ‡å¿—ä½?ç½®ä½?
			else
				key_released<='b0;
		end
end
always @ (posedge clk or negedge rst) 
begin             
  if(!rst)
    key_pressed<= 0;
  else if (cnt == 4'hA)                 // é‡‡é›†å®Œä¸€ä¸ªå­—èŠ‚ï¼Ÿ 
  begin      
    if (!key_released)                  // æœ‰é”®æŒ‰è¿‡ï¼Ÿ
    begin 
      ps2_byte<= ps2_byte_buf;      // é”?å­˜å½“å‰?é”®å€¼
      key_pressed <= 'b1;                 // æŒ‰ä¸‹æ ‡å¿—ç½®ä¸€
    end
    else 
      key_pressed <= 'b0;                 // æŒ‰ä¸‹æ ‡å¿—æ¸…é›¶
  end
end 
*/
 
reg[7:0] ps2_asci;	//æŽ¥æ”¶æ•°æ?®çš„ç›¸åº”ASCIIç ?
 
always @ (ps2_byte_r) begin
	case (ps2_byte_r)		//é”®å€¼è½¬æ?¢ä¸ºASCIIç ?ï¼Œè¿™é‡Œå?šçš„æ¯”è¾ƒç®€å?•ï¼Œå?ªå¤„ç?†å­—æ¯?
		8'h15: ps2_asci <= 8'h51;	//Q
		8'h1d: ps2_asci <= 8'h57;	//W
		8'h24: ps2_asci <= 8'h45;	//E
		8'h2d: ps2_asci <= 8'h52;	//R
		8'h2c: ps2_asci <= 8'h54;	//T
		8'h35: ps2_asci <= 8'h59;	//Y
		8'h3c: ps2_asci <= 8'h55;	//U
		8'h43: ps2_asci <= 8'h49;	//I
		8'h44: ps2_asci <= 8'h4f;	//O
		8'h4d: ps2_asci <= 8'h50;	//P				  	
		8'h1c: ps2_asci <= 8'h41;	//A
		8'h1b: ps2_asci <= 8'h53;	//S
		8'h23: ps2_asci <= 8'h44;	//D
		8'h2b: ps2_asci <= 8'h46;	//F
		8'h34: ps2_asci <= 8'h47;	//G
		8'h33: ps2_asci <= 8'h48;	//H
		8'h3b: ps2_asci <= 8'h4a;	//J
		8'h42: ps2_asci <= 8'h4b;	//K
		8'h4b: ps2_asci <= 8'h4c;	//L
		8'h1a: ps2_asci <= 8'h5a;	//Z
		8'h22: ps2_asci <= 8'h58;	//X
		8'h21: ps2_asci <= 8'h43;	//C
		8'h2a: ps2_asci <= 8'h56;	//V
		8'h32: ps2_asci <= 8'h42;	//B
		8'h31: ps2_asci <= 8'h4e;	//N
		8'h3a: ps2_asci <= 8'h4d;	//M

        8'h75: ps2_asci <= 8'h18;    //UP
        8'h72: ps2_asci <= 8'h19;    //DOWN
        8'h6b: ps2_asci <= 8'h1b;    //LEFT
        8'h74: ps2_asci <= 8'h1a;    //RIGHT
        8'h16: ps2_asci <= 8'h31;    //1
        8'h1e: ps2_asci <= 8'h32;    //2
        8'h26: ps2_asci <= 8'h33;    //3
        8'h25: ps2_asci <= 8'h34;    //4
        8'h2e: ps2_asci <= 8'h35;    //5
        8'h36: ps2_asci <= 8'h36;    //6
        8'h3d: ps2_asci <= 8'h37;    //7
        8'h3e: ps2_asci <= 8'h38;    //8
        8'h46: ps2_asci <= 8'h39;    //9
        8'h45: ps2_asci <= 8'h30;    //0
		default: ;
		endcase
end
 
assign ps2_byte = ps2_asci;	 
assign ps2_state = ps2_state_r;
//==================keyboard driver part over======================
 
endmodule