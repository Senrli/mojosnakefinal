/*
   This file was generated automatically by Alchitry Labs version 1.1.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module snake_fsm_7 (
    input clk,
    input rst,
    input left_button,
    input right_button,
    input up_button,
    input down_button,
    output reg vram_wr_en,
    output reg [11:0] vram_wr_addr,
    output reg [15:0] vram_wr_data,
    input debug_en,
    input debug_wr_en,
    input [9:0] debug_addr,
    output reg [15:0] debug_read_data,
    input [15:0] debug_write_data,
    output reg debug_read_ready,
    output reg [7:0] debugled,
    input user1_newinput,
    input [7:0] user1_inputdata,
    input user2_newinput,
    input [7:0] user2_inputdata,
    output reg sound_out
  );
  
  
  
  reg [31:0] M_highscore_d, M_highscore_q = 1'h0;
  
  reg [24:0] M_input_counter_d, M_input_counter_q = 1'h0;
  reg [3:0] M_user_input_d, M_user_input_q = 1'h0;
  reg [15:0] M_head_address_d, M_head_address_q = 1'h0;
  reg [15:0] M_previous_head_d, M_previous_head_q = 1'h0;
  reg [15:0] M_tail_address_d, M_tail_address_q = 1'h0;
  reg [15:0] M_previous_tail_d, M_previous_tail_q = 1'h0;
  reg [15:0] M_block_state_d, M_block_state_q = 1'h0;
  reg [15:0] M_direction_d, M_direction_q = 1'h0;
  reg [15:0] M_snake_length_d, M_snake_length_q = 1'h0;
  localparam START_SCREEN_state = 5'd0;
  localparam GEN_FRUIT_state = 5'd1;
  localparam DRAW_START_state = 5'd2;
  localparam CALC_state = 5'd3;
  localparam MUL1_1_state = 5'd4;
  localparam MUL1_2_state = 5'd5;
  localparam DIV1_state = 5'd6;
  localparam ADD1_state = 5'd7;
  localparam DRAW1_state = 5'd8;
  localparam ADD2_state = 5'd9;
  localparam DRAW2_state = 5'd10;
  localparam DRAW_SCORE_state = 5'd11;
  localparam WAIT_INPUT_state = 5'd12;
  localparam COMPARE_STATE_state = 5'd13;
  localparam KEEP_LENGTH_state = 5'd14;
  localparam GROW_state = 5'd15;
  localparam GAMEOVER_state = 5'd16;
  
  reg [4:0] M_state_d, M_state_q = START_SCREEN_state;
  reg M_ram_clear_d, M_ram_clear_q = 1'h0;
  reg [9:0] M_ram_clear_counter_d, M_ram_clear_counter_q = 1'h0;
  reg M_ram_read_d, M_ram_read_q = 1'h0;
  reg M_ram_write_d, M_ram_write_q = 1'h0;
  reg [7:0] M_ram_write_counter_d, M_ram_write_counter_q = 1'h0;
  reg M_vram_refresh_d, M_vram_refresh_q = 1'h0;
  reg [15:0] M_vram_temp_reg_0_d, M_vram_temp_reg_0_q = 1'h0;
  reg [15:0] M_vram_temp_reg_1_d, M_vram_temp_reg_1_q = 1'h0;
  reg [15:0] M_vram_temp_reg_2_d, M_vram_temp_reg_2_q = 1'h0;
  reg [15:0] M_vram_temp_reg_3_d, M_vram_temp_reg_3_q = 1'h0;
  reg [15:0] M_vram_temp_reg_8_d, M_vram_temp_reg_8_q = 1'h0;
  reg [255:0] M_vram_temp_reg_d, M_vram_temp_reg_q = 1'h0;
  reg [2:0] M_keep_length_counter_d, M_keep_length_counter_q = 1'h0;
  reg [11:0] M_vram_refresh_ctr_d, M_vram_refresh_ctr_q = 1'h0;
  reg [31:0] M_score_d, M_score_q = 1'h0;
  reg [9:0] M_random_num_d, M_random_num_q = 1'h0;
  reg [4:0] M_calc_counter_d, M_calc_counter_q = 1'h0;
  reg M_debug_read_ctr_d, M_debug_read_ctr_q = 1'h0;
  reg [15:0] M_r1_d, M_r1_q = 1'h0;
  reg [15:0] M_r2_d, M_r2_q = 1'h0;
  reg [15:0] M_r3_d, M_r3_q = 1'h0;
  reg [31:0] M_r4_d, M_r4_q = 1'h0;
  reg [7:0] M_debugreg_d, M_debugreg_q = 1'h0;
  
  reg ram_wr_en;
  
  reg [9:0] ram_addr;
  
  reg [15:0] ram_wr_data;
  
  reg [9:0] dividend;
  
  reg [5:0] divisor;
  
  reg [9:0] mul_a;
  
  reg [5:0] mul_b;
  
  reg [15:0] reg_val;
  
  reg [26:0] score_decoder_input;
  
  reg [26:0] highscore_decoder_input;
  
  reg sound_en;
  
  reg [2:0] sound_type;
  
  localparam START_POS = 10'h1cc;
  
  localparam TOTAL_BLOCKS = 10'h3b8;
  
  localparam DIE_POS = 11'h4a6;
  
  localparam DIE_LEN = 4'h9;
  
  localparam SCORE_ADDR_START = 10'h368;
  
  localparam HIGHSCORE_ADDR_START = 10'h220;
  
  localparam DELAY_VAL = 22'h2625a0;
  
  localparam FRUIT_SCORE = 4'ha;
  
  localparam SNAKE_SHAPE = 8'hdb;
  
  localparam FRUIT_SHAPE = 8'hb1;
  
  localparam WALL_SHAPE = 8'hb2;
  
  localparam EMPTY_SHAPE = 8'h00;
  
  localparam SMILEY_SHAPE = 8'h01;
  
  localparam BLACK_ON_GREEN = 8'ha0;
  
  localparam WHITE_ON_BLACK = 8'h0f;
  
  localparam GREEN_ON_BLACK = 8'h0a;
  
  localparam BLACK_ON_RED = 8'h0c;
  
  localparam FRUIT_SHAPE_MELON = 8'he0;
  
  localparam SCORE = 80'h45524f43532020202020;
  
  localparam COURSE = 80'h5343203230302e303520;
  
  localparam SNAKE = 80'h454b414e532020202020;
  
  localparam BY = 80'h20202020202020794220;
  
  localparam JOSEPH = 80'h687065736f4a20202020;
  
  localparam SENRUI = 80'h6975726e655320202020;
  
  localparam SHAWN = 80'h6e776168532020202020;
  
  localparam XULIANG = 80'h676e61694c2075582020;
  
  localparam ZEFAN = 80'h6e6166655a2020202020;
  
  localparam HIGHSCORE = 80'h45524f43534847494820;
  
  localparam OVER = 80'h5245564f20454d414720;
  
  localparam SCOREVAL = 80'h30303030303030303030;
  
  wire [16-1:0] M_disp_game_mem_read_data;
  simple_ram_14 #(.SIZE(5'h10), .DEPTH(10'h3b8)) disp_game_mem (
    .clk(clk),
    .write_en(ram_wr_en),
    .write_data(ram_wr_data),
    .address(ram_addr),
    .read_data(M_disp_game_mem_read_data)
  );
  
  wire [32-1:0] M_random_num;
  pn_gen_15 random (
    .clk(clk),
    .rst(rst),
    .next(1'h1),
    .seed(32'h00000000),
    .num(M_random_num)
  );
  
  wire [1-1:0] M_divider_rfd;
  wire [10-1:0] M_divider_quotient;
  wire [6-1:0] M_divider_fractional;
  div_gen_v3_0 divider (
    .clk(clk),
    .dividend(dividend),
    .divisor(divisor),
    .rfd(M_divider_rfd),
    .quotient(M_divider_quotient),
    .fractional(M_divider_fractional)
  );
  
  wire [16-1:0] M_multiplier_p;
  multiplier multiplier (
    .clk(clk),
    .a(mul_a),
    .b(mul_b),
    .p(M_multiplier_p)
  );
  
  wire [32-1:0] M_score_decoder_digits;
  bin_to_dec_16 score_decoder (
    .value(score_decoder_input),
    .digits(M_score_decoder_digits)
  );
  
  wire [32-1:0] M_highscore_decoder_digits;
  bin_to_dec_16 highscore_decoder (
    .value(highscore_decoder_input),
    .digits(M_highscore_decoder_digits)
  );
  
  wire [8-1:0] M_sound_gen_sound_out;
  sound_gen_17 sound_gen (
    .clk(clk),
    .rst(rst),
    .sound_type(sound_type),
    .sound_en(sound_en),
    .sound_out(M_sound_gen_sound_out)
  );
  
  wire [4-1:0] M_direction_lut_travel_dir;
  reg [8-1:0] M_direction_lut_dir_state;
  direction_lut_18 direction_lut (
    .dir_state(M_direction_lut_dir_state),
    .travel_dir(M_direction_lut_travel_dir)
  );
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_simple_19 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_r2_d = M_r2_q;
    M_r3_d = M_r3_q;
    M_r4_d = M_r4_q;
    M_keep_length_counter_d = M_keep_length_counter_q;
    M_debugreg_d = M_debugreg_q;
    M_previous_tail_d = M_previous_tail_q;
    M_head_address_d = M_head_address_q;
    M_tail_address_d = M_tail_address_q;
    M_ram_write_d = M_ram_write_q;
    M_snake_length_d = M_snake_length_q;
    M_vram_temp_reg_0_d = M_vram_temp_reg_0_q;
    M_score_d = M_score_q;
    M_vram_temp_reg_2_d = M_vram_temp_reg_2_q;
    M_vram_temp_reg_1_d = M_vram_temp_reg_1_q;
    M_vram_temp_reg_3_d = M_vram_temp_reg_3_q;
    M_user_input_d = M_user_input_q;
    M_ram_write_counter_d = M_ram_write_counter_q;
    M_vram_temp_reg_8_d = M_vram_temp_reg_8_q;
    M_ram_clear_counter_d = M_ram_clear_counter_q;
    M_input_counter_d = M_input_counter_q;
    M_direction_d = M_direction_q;
    M_random_num_d = M_random_num_q;
    M_vram_refresh_ctr_d = M_vram_refresh_ctr_q;
    M_ram_read_d = M_ram_read_q;
    M_calc_counter_d = M_calc_counter_q;
    M_vram_temp_reg_d = M_vram_temp_reg_q;
    M_previous_head_d = M_previous_head_q;
    M_highscore_d = M_highscore_q;
    M_vram_refresh_d = M_vram_refresh_q;
    M_debug_read_ctr_d = M_debug_read_ctr_q;
    M_ram_clear_d = M_ram_clear_q;
    M_r1_d = M_r1_q;
    
    sound_en = 1'h0;
    sound_type = 1'h0;
    sound_out = M_sound_gen_sound_out;
    debugled = M_debugreg_q;
    if (debug_en) begin
      dividend = 10'bzzzzzzzzzz;
      divisor = 6'bzzzzzz;
      mul_a = 10'bzzzzzzzzzz;
      mul_b = 6'bzzzzzz;
      M_direction_lut_dir_state = 1'h0;
      M_alu_a = 1'h0;
      M_alu_b = 1'h0;
      M_alu_alufn = 1'bz;
      if (debug_wr_en) begin
        ram_wr_en = 1'h1;
        ram_addr = debug_addr;
        ram_wr_data = debug_write_data;
      end else begin
        ram_wr_en = 1'h0;
        
        case (M_debug_read_ctr_q)
          1'h0: begin
            ram_addr = debug_addr;
            M_debug_read_ctr_d = 1'h1;
            debug_read_ready = 1'h0;
            debug_read_data = 1'h0;
          end
          1'h1: begin
            ram_addr = debug_addr;
            debug_read_data = M_disp_game_mem_read_data;
            debug_read_ready = 1'h1;
          end
          default: begin
            debug_read_ready = 1'h0;
            debug_read_data = 10'h000;
          end
        endcase
      end
    end else begin
      M_alu_a = 16'bzzzzzzzzzzzzzzzz;
      M_alu_b = 16'bzzzzzzzzzzzzzzzz;
      M_alu_alufn = 6'bzzzzzz;
      debug_read_ready = 1'h0;
      debug_read_data = 10'h000;
      M_debug_read_ctr_d = 1'h0;
      score_decoder_input = M_score_q;
      highscore_decoder_input = M_highscore_q;
      
      case (M_state_q)
        START_SCREEN_state: begin
          M_direction_d = 16'h0004;
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 1'h1;
          M_snake_length_d = 3'h4;
          M_head_address_d = 10'h1cc;
          if (left_button || right_button || up_button || down_button) begin
            sound_en = 1'h1;
            sound_type = 1'h1;
            vram_wr_en = 1'h0;
            ram_wr_en = 1'h0;
            M_ram_write_counter_d = 1'h0;
            M_random_num_d = M_random_num[0+9-:10];
            M_state_d = GEN_FRUIT_state;
          end
          if (~M_ram_clear_q) begin
            ram_wr_en = 1'h1;
            ram_wr_data = 1'h0;
            ram_addr = M_ram_clear_counter_q;
            if (M_ram_clear_counter_q == 10'h3b7) begin
              M_ram_clear_counter_d = 1'h0;
              M_ram_clear_d = 1'h1;
              M_ram_write_d = 1'h1;
            end else begin
              M_ram_clear_counter_d = M_ram_clear_counter_q + 1'h1;
            end
          end else begin
            ram_wr_en = 1'h0;
            ram_wr_data = 1'h0;
            ram_addr = 1'h0;
          end
          if (M_ram_write_q) begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                ram_wr_en = 1'h1;
                ram_addr = 10'h1cc;
                ram_wr_data = 16'hc400;
                M_vram_temp_reg_0_d = {2'h3, 4'h1, ram_addr};
                M_vram_temp_reg_d[(M_ram_write_counter_q)*16+15-:16] = {2'h3, 4'h1, ram_addr};
                M_head_address_d = {2'h3, 4'h1, ram_addr};
                M_previous_head_d = {2'h3, 4'h1, ram_addr};
                M_ram_write_counter_d = M_ram_write_counter_q + 1'h1;
              end
              1'h1: begin
                ram_wr_en = 1'h1;
                reg_val = 11'h1cb;
                ram_addr = reg_val[0+9-:10];
                ram_wr_data = 16'hc5cc;
                M_vram_temp_reg_1_d = {2'h3, 4'h1, ram_addr};
                M_vram_temp_reg_d[(M_ram_write_counter_q)*16+15-:16] = {2'h3, 4'h1, ram_addr};
                M_ram_write_counter_d = M_ram_write_counter_q + 1'h1;
              end
              2'h2: begin
                ram_wr_en = 1'h1;
                reg_val = 11'h1ca;
                ram_addr = reg_val[0+9-:10];
                ram_wr_data = {2'h3, 4'h1, ram_addr + 1'h1};
                M_vram_temp_reg_2_d = {2'h3, 4'h1, ram_addr};
                M_vram_temp_reg_d[(M_ram_write_counter_q)*16+15-:16] = {2'h3, 4'h1, ram_addr};
                M_ram_write_counter_d = M_ram_write_counter_q + 1'h1;
              end
              2'h3: begin
                ram_wr_en = 1'h1;
                reg_val = 11'h1c9;
                ram_addr = reg_val[0+9-:10];
                ram_wr_data = {2'h3, 4'h1, ram_addr + 1'h1};
                M_vram_temp_reg_3_d = {2'h3, 4'h1, ram_addr};
                M_vram_temp_reg_d[(M_ram_write_counter_q)*16+15-:16] = {2'h3, 4'h1, ram_addr};
                M_tail_address_d = {2'h3, 4'h1, ram_addr};
                M_previous_tail_d = {2'h3, 4'h1, ram_addr};
                M_ram_write_d = 1'h0;
                M_ram_write_counter_d = 1'h0;
              end
              default: begin
                ram_wr_en = 1'h0;
                ram_addr = 1'h0;
                ram_wr_data = 1'h0;
                M_ram_write_d = 1'h0;
                M_ram_write_counter_d = 1'h0;
              end
            endcase
          end
          if (~M_vram_refresh_q) begin
            vram_wr_en = 1'h1;
            if (M_vram_refresh_ctr_q < 12'h960) begin
              vram_wr_addr = M_vram_refresh_ctr_q;
              if (M_vram_refresh_ctr_q == 1'h0) begin
                vram_wr_data = 16'h0fc9;
              end else begin
                if (M_vram_refresh_ctr_q == 12'h910) begin
                  vram_wr_data = 16'h0fc8;
                end else begin
                  if (M_vram_refresh_ctr_q == 7'h45) begin
                    vram_wr_data = 16'h0fbb;
                  end else begin
                    if (M_vram_refresh_ctr_q == 12'h955) begin
                      vram_wr_data = 16'h0fbc;
                    end else begin
                      if ((M_vram_refresh_ctr_q - 7'h50 * (M_vram_refresh_ctr_q / 7'h50)) == 1'h0) begin
                        vram_wr_data = 16'h0fba;
                      end else begin
                        if ((M_vram_refresh_ctr_q - 7'h50 * (M_vram_refresh_ctr_q / 7'h50)) == 7'h45) begin
                          vram_wr_data = 16'h0fba;
                        end else begin
                          if (M_vram_refresh_ctr_q > 1'h0 && M_vram_refresh_ctr_q < 7'h45) begin
                            vram_wr_data = 16'h0fcd;
                          end else begin
                            if (M_vram_refresh_ctr_q > 12'h910 && M_vram_refresh_ctr_q < 12'h955) begin
                              vram_wr_data = 16'h0fcd;
                            end else begin
                              if (M_vram_refresh_ctr_q >= 9'h1d6 && M_vram_refresh_ctr_q <= 9'h1df) begin
                                vram_wr_data = {8'h0f, HIGHSCORE[(M_vram_refresh_ctr_q - 9'h1d6)*8+0+7-:8]};
                              end else begin
                                if (M_vram_refresh_ctr_q >= 10'h228 && M_vram_refresh_ctr_q <= 10'h22f) begin
                                  vram_wr_data = 17'h00f30 + M_highscore_decoder_digits[(3'h7 - (M_vram_refresh_ctr_q - 10'h228))*4+3-:4];
                                end else begin
                                  if (M_vram_refresh_ctr_q >= 10'h316 && M_vram_refresh_ctr_q <= 10'h31f) begin
                                    vram_wr_data = {8'h0f, SCORE[(M_vram_refresh_ctr_q - 10'h316)*8+0+7-:8]};
                                  end else begin
                                    if (M_vram_refresh_ctr_q >= 10'h368 && M_vram_refresh_ctr_q <= 10'h36f) begin
                                      vram_wr_data = {8'h0f, SCOREVAL[(M_vram_refresh_ctr_q - 10'h366)*8+0+7-:8]};
                                    end else begin
                                      if (M_vram_refresh_ctr_q >= 11'h5e6 && M_vram_refresh_ctr_q <= 11'h5ef) begin
                                        vram_wr_data = {8'h0f, COURSE[(M_vram_refresh_ctr_q - 11'h5e6)*8+0+7-:8]};
                                      end else begin
                                        if (M_vram_refresh_ctr_q >= 11'h686 && M_vram_refresh_ctr_q <= 11'h68f) begin
                                          vram_wr_data = {8'h0f, SNAKE[(M_vram_refresh_ctr_q - 11'h686)*8+0+7-:8]};
                                        end else begin
                                          if (M_vram_refresh_ctr_q >= 11'h726 && M_vram_refresh_ctr_q <= 11'h72f) begin
                                            vram_wr_data = {8'h0f, BY[(M_vram_refresh_ctr_q - 11'h726)*8+0+7-:8]};
                                          end else begin
                                            if (M_vram_refresh_ctr_q >= 11'h776 && M_vram_refresh_ctr_q <= 11'h77f) begin
                                              vram_wr_data = {8'h0f, JOSEPH[(M_vram_refresh_ctr_q - 11'h776)*8+0+7-:8]};
                                            end else begin
                                              if (M_vram_refresh_ctr_q >= 11'h7c6 && M_vram_refresh_ctr_q <= 11'h7cf) begin
                                                vram_wr_data = {8'h0f, SENRUI[(M_vram_refresh_ctr_q - 11'h7c6)*8+0+7-:8]};
                                              end else begin
                                                if (M_vram_refresh_ctr_q >= 12'h816 && M_vram_refresh_ctr_q <= 12'h81f) begin
                                                  vram_wr_data = {8'h0f, SHAWN[(M_vram_refresh_ctr_q - 12'h816)*8+0+7-:8]};
                                                end else begin
                                                  if (M_vram_refresh_ctr_q >= 12'h866 && M_vram_refresh_ctr_q <= 12'h86f) begin
                                                    vram_wr_data = {8'h0f, XULIANG[(M_vram_refresh_ctr_q - 12'h866)*8+0+7-:8]};
                                                  end else begin
                                                    if (M_vram_refresh_ctr_q >= 12'h8b6 && M_vram_refresh_ctr_q <= 12'h8bf) begin
                                                      vram_wr_data = {8'h0f, ZEFAN[(M_vram_refresh_ctr_q - 12'h8b6)*8+0+7-:8]};
                                                    end else begin
                                                      vram_wr_data = 1'h0;
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if (M_vram_refresh_ctr_q == 12'h95f) begin
                M_vram_refresh_d = 1'h1;
                M_vram_refresh_ctr_d = 1'h0;
              end else begin
                M_vram_refresh_ctr_d = M_vram_refresh_ctr_q + 1'h1;
              end
            end
          end else begin
            vram_wr_en = 1'h0;
          end
        end
        GEN_FRUIT_state: begin
          M_debugreg_d = 8'hfe;
          if (M_random_num_q > 10'h3b7) begin
            vram_wr_en = 1'h0;
            ram_wr_en = 1'h0;
            M_ram_write_counter_d = 1'h0;
            M_random_num_d = M_random_num[0+9-:10];
            M_state_d = GEN_FRUIT_state;
          end else begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                ram_addr = M_random_num_q;
                vram_wr_en = 1'h0;
                ram_wr_en = 1'h0;
                M_ram_write_counter_d = 1'h1;
              end
              1'h1: begin
                ram_addr = M_random_num_q;
                M_r4_d = M_disp_game_mem_read_data;
                if (M_disp_game_mem_read_data[14+1-:2] == 1'h0) begin
                  vram_wr_en = 1'h0;
                  ram_wr_en = 1'h1;
                  ram_wr_data = 16'h4000;
                  M_vram_temp_reg_8_d = {6'h11, ram_addr};
                  M_vram_temp_reg_d[128+15-:16] = {6'h11, ram_addr};
                  M_ram_write_d = 1'h0;
                  M_ram_write_counter_d = 1'h0;
                  M_vram_refresh_d = 1'h0;
                  M_vram_refresh_ctr_d = 1'h0;
                  M_state_d = DRAW_START_state;
                end else begin
                  vram_wr_en = 1'h0;
                  ram_wr_en = 1'h0;
                  M_random_num_d = M_random_num[0+9-:10];
                  M_state_d = GEN_FRUIT_state;
                  M_ram_write_counter_d = 1'h0;
                end
              end
            endcase
          end
        end
        DRAW_START_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 2'h2;
          vram_wr_en = 1'h0;
          ram_wr_en = 1'h0;
          if (M_ram_write_counter_q == 4'hf) begin
            M_state_d = DRAW_SCORE_state;
            M_vram_refresh_ctr_d = 1'h0;
          end else begin
            reg_val = M_vram_temp_reg_q[(M_ram_write_counter_q)*16+15-:16];
            if (1'h0) begin
              
              case (M_ram_write_counter_q)
                1'h0: begin
                  reg_val = M_vram_temp_reg_0_q;
                end
                1'h1: begin
                  reg_val = M_vram_temp_reg_1_q;
                end
                2'h2: begin
                  reg_val = M_vram_temp_reg_2_q;
                end
                2'h3: begin
                  reg_val = M_vram_temp_reg_3_q;
                end
                default: begin
                  reg_val = 1'h0;
                end
              endcase
            end
            ram_addr = reg_val[0+9-:10];
            if (reg_val[10+0-:1]) begin
              M_state_d = CALC_state;
              M_calc_counter_d = 1'h0;
            end else begin
              M_ram_write_counter_d = M_ram_write_counter_q + 1'h1;
            end
          end
        end
        CALC_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 2'h3;
          reg_val = M_vram_temp_reg_q[(M_ram_write_counter_q)*16+15-:16];
          if (1'h0) begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                reg_val = M_vram_temp_reg_0_q;
              end
              1'h1: begin
                reg_val = M_vram_temp_reg_1_q;
              end
              2'h2: begin
                reg_val = M_vram_temp_reg_2_q;
              end
              2'h3: begin
                reg_val = M_vram_temp_reg_3_q;
              end
              default: begin
                reg_val = 1'h0;
              end
            endcase
          end
          vram_wr_en = 1'h0;
          ram_wr_en = 1'h0;
          ram_addr = reg_val[0+9-:10];
          
          case (M_calc_counter_q)
            1'h0: begin
              divisor = 6'h22;
              dividend = ram_addr;
              mul_a = ram_addr;
              mul_b = 2'h2;
              M_calc_counter_d = 1'h1;
            end
            1'h1: begin
              divisor = 6'h22;
              dividend = ram_addr;
              mul_a = ram_addr;
              mul_b = 2'h2;
              M_calc_counter_d = 2'h2;
            end
            2'h2: begin
              divisor = 6'h22;
              dividend = ram_addr;
              mul_a = ram_addr;
              mul_b = 2'h2;
              M_calc_counter_d = 2'h3;
            end
            2'h3: begin
              divisor = 6'h22;
              dividend = ram_addr;
              mul_a = ram_addr;
              mul_b = 2'h2;
              M_alu_alufn = 6'h22;
              M_alu_a = ram_addr;
              M_alu_b = 1'h1;
              M_r1_d = M_alu_alu;
              M_calc_counter_d = 3'h4;
            end
            3'h4: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 3'h5;
            end
            3'h5: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 3'h6;
            end
            3'h6: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 3'h7;
            end
            3'h7: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'h8;
            end
            4'h8: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'h9;
            end
            4'h9: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'ha;
            end
            4'ha: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'hb;
            end
            4'hb: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'hc;
            end
            4'hc: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_calc_counter_d = 4'hd;
            end
            4'hd: begin
              divisor = 6'h22;
              dividend = ram_addr;
              M_r2_d = M_divider_quotient;
              M_calc_counter_d = 4'he;
            end
            4'he: begin
              mul_a = M_r2_q;
              mul_b = 4'hc;
              M_calc_counter_d = 4'hf;
            end
            4'hf: begin
              mul_a = M_r2_q;
              mul_b = 4'hc;
              M_calc_counter_d = 5'h10;
            end
            5'h10: begin
              mul_a = M_r2_q;
              mul_b = 4'hc;
              M_calc_counter_d = 5'h11;
            end
            5'h11: begin
              mul_a = M_r2_q;
              mul_b = 4'hc;
              M_r2_d = M_multiplier_p;
              M_calc_counter_d = 1'h0;
              M_state_d = ADD1_state;
            end
          endcase
        end
        ADD1_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 3'h4;
          vram_wr_en = 1'h0;
          ram_wr_en = 1'h0;
          reg_val = M_vram_temp_reg_q[(M_ram_write_counter_q)*16+15-:16];
          if (1'h0) begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                reg_val = M_vram_temp_reg_0_q;
              end
              1'h1: begin
                reg_val = M_vram_temp_reg_1_q;
              end
              2'h2: begin
                reg_val = M_vram_temp_reg_2_q;
              end
              2'h3: begin
                reg_val = M_vram_temp_reg_3_q;
              end
              default: begin
                reg_val = 1'h0;
              end
            endcase
          end
          ram_addr = reg_val[0+9-:10];
          M_r3_d = M_r1_q + M_r2_q + 7'h51;
          M_state_d = DRAW1_state;
        end
        DRAW1_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 3'h5;
          ram_wr_en = 1'h0;
          vram_wr_en = 1'h1;
          vram_wr_addr = M_r3_q;
          reg_val = M_vram_temp_reg_q[(M_ram_write_counter_q)*16+15-:16];
          if (1'h0) begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                reg_val = M_vram_temp_reg_0_q;
              end
              1'h1: begin
                reg_val = M_vram_temp_reg_1_q;
              end
              2'h2: begin
                reg_val = M_vram_temp_reg_2_q;
              end
              2'h3: begin
                reg_val = M_vram_temp_reg_3_q;
              end
              default: begin
                reg_val = 1'h0;
              end
            endcase
          end
          if (reg_val[15+0-:1] == 1'h0 && reg_val[14+0-:1] == 1'h0) begin
            vram_wr_data = 16'h0000;
          end else begin
            if (reg_val[15+0-:1] == 1'h0 && reg_val[14+0-:1] == 1'h1) begin
              vram_wr_data = 16'h0ce0;
            end else begin
              if (reg_val[15+0-:1] == 1'h1 && reg_val[14+0-:1] == 1'h0) begin
                vram_wr_data = 16'ha0b2;
              end else begin
                if (reg_val[15+0-:1] == 1'h1 && reg_val[14+0-:1] == 1'h1) begin
                  vram_wr_data = 16'h0adb;
                end else begin
                  vram_wr_data = 16'ha001;
                end
              end
            end
          end
          M_state_d = ADD2_state;
        end
        ADD2_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = M_r3_q;
          M_alu_b = 1'h1;
          M_alu_alufn = 6'h00;
          M_debugreg_d = 3'h6;
          ram_wr_en = 1'h0;
          vram_wr_en = 1'h0;
          M_r3_d = M_alu_alu;
          M_state_d = DRAW2_state;
        end
        DRAW2_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 3'h7;
          ram_wr_en = 1'h0;
          vram_wr_en = 1'h1;
          vram_wr_addr = M_r3_q;
          reg_val = M_vram_temp_reg_q[(M_ram_write_counter_q)*16+15-:16];
          M_vram_temp_reg_d[(M_ram_write_counter_q)*16+15-:16] = 1'h0;
          if (1'h0) begin
            
            case (M_ram_write_counter_q)
              1'h0: begin
                reg_val = M_vram_temp_reg_0_q;
                M_vram_temp_reg_0_d = 1'h0;
              end
              1'h1: begin
                reg_val = M_vram_temp_reg_1_q;
                M_vram_temp_reg_1_d = 1'h0;
              end
              2'h2: begin
                reg_val = M_vram_temp_reg_2_q;
                M_vram_temp_reg_2_d = 1'h0;
              end
              2'h3: begin
                reg_val = M_vram_temp_reg_3_q;
                M_vram_temp_reg_3_d = 1'h0;
              end
            endcase
          end
          if (reg_val[15+0-:1] == 1'h0 && reg_val[14+0-:1] == 1'h0) begin
            vram_wr_data = 16'h0000;
          end else begin
            if (reg_val[15+0-:1] == 1'h0 && reg_val[14+0-:1] == 1'h1) begin
              vram_wr_data = 17'h00ae1;
            end else begin
              if (reg_val[15+0-:1] == 1'h1 && reg_val[14+0-:1] == 1'h0) begin
                vram_wr_data = 16'ha0b2;
              end else begin
                if (reg_val[15+0-:1] == 1'h1 && reg_val[14+0-:1] == 1'h1) begin
                  vram_wr_data = 16'h0adb;
                end else begin
                  vram_wr_data = 16'ha001;
                end
              end
            end
          end
          M_ram_write_counter_d = M_ram_write_counter_q + 1'h1;
          M_state_d = DRAW_START_state;
        end
        DRAW_SCORE_state: begin
          M_debugreg_d = DRAW_SCORE_state;
          M_alu_a = M_score_q[0+15-:16];
          M_alu_b = 16'h0046;
          M_alu_alufn = 6'h37;
          if (M_vram_refresh_ctr_q < 5'h10) begin
            if (M_vram_refresh_ctr_q >= 1'h0 && M_vram_refresh_ctr_q < 4'h8) begin
              vram_wr_en = 1'h1;
              vram_wr_addr = 10'h368 + M_vram_refresh_ctr_q;
              vram_wr_data = 17'h00f30 + M_score_decoder_digits[(3'h7 - M_vram_refresh_ctr_q)*4+3-:4];
              M_vram_refresh_ctr_d = M_vram_refresh_ctr_q + 1'h1;
            end else begin
              if (M_vram_refresh_ctr_q >= 4'h8 && M_vram_refresh_ctr_q < 5'h10) begin
                vram_wr_en = 1'h1;
                vram_wr_addr = 10'h220 + M_vram_refresh_ctr_q;
                vram_wr_data = 17'h00f30 + M_highscore_decoder_digits[(4'hf - M_vram_refresh_ctr_q)*4+3-:4];
                M_vram_refresh_ctr_d = M_vram_refresh_ctr_q + 1'h1;
              end
            end
          end else begin
            if (M_vram_refresh_ctr_q >= 5'h10) begin
              if (M_score_q > 5'h1e && M_score_q <= 7'h46) begin
                M_user_input_d = 1'h0;
                vram_wr_en = 1'h0;
                M_vram_refresh_ctr_d = 1'h0;
                M_ram_write_counter_d = 1'h0;
                M_ram_write_d = 1'h1;
                M_input_counter_d = 1'h0;
                M_ram_read_d = 1'h0;
                M_user_input_d = 1'h0;
                M_r4_d = 22'h2625a0;
                M_state_d = WAIT_INPUT_state;
              end else begin
                if (M_score_q > 7'h46) begin
                  vram_wr_en = 1'h0;
                  M_vram_refresh_ctr_d = 1'h0;
                  M_ram_write_counter_d = 1'h0;
                  M_ram_write_d = 1'h1;
                  M_input_counter_d = 1'h0;
                  M_ram_read_d = 1'h0;
                  M_user_input_d = 1'h0;
                  M_user_input_d = 1'h0;
                  M_r4_d = 21'h1312d0;
                  M_state_d = WAIT_INPUT_state;
                end else begin
                  vram_wr_en = 1'h0;
                  M_vram_refresh_ctr_d = 1'h0;
                  M_ram_write_counter_d = 1'h0;
                  M_ram_write_d = 1'h1;
                  M_input_counter_d = 1'h0;
                  M_ram_read_d = 1'h0;
                  M_user_input_d = 1'h0;
                  M_user_input_d = 1'h0;
                  M_r4_d = 22'h3d0900;
                  M_state_d = WAIT_INPUT_state;
                end
              end
            end
          end
        end
        WAIT_INPUT_state: begin
          M_debugreg_d = 4'h8;
          ram_wr_en = 1'h0;
          vram_wr_en = 1'h0;
          if ({left_button, right_button, up_button, down_button} != 1'h0) begin
            M_user_input_d = {left_button, right_button, up_button, down_button};
          end
          if (M_input_counter_q == M_r4_q) begin
            M_direction_lut_dir_state = {M_direction_q[0+3-:4], M_user_input_q[0+3-:4]};
            if (M_direction_lut_travel_dir == 4'h8 || M_direction_lut_travel_dir == 4'h2) begin
              M_alu_alufn = 6'h01;
              M_alu_a = M_head_address_q;
              ram_addr = M_alu_alu;
              if (M_direction_lut_travel_dir == 4'h8) begin
                M_alu_b = 1'h1;
              end else begin
                if (M_direction_lut_travel_dir == 4'h2) begin
                  M_alu_b = 6'h22;
                end
              end
            end else begin
              if (M_direction_lut_travel_dir == 4'h4 || M_direction_lut_travel_dir == 4'h1) begin
                M_alu_alufn = 6'h00;
                M_alu_a = M_head_address_q;
                ram_addr = M_alu_alu;
                if (M_direction_lut_travel_dir == 4'h4) begin
                  M_alu_b = 1'h1;
                end else begin
                  if (M_direction_lut_travel_dir == 4'h1) begin
                    M_alu_b = 6'h22;
                  end
                end
              end else begin
                M_alu_a = 16'bzzzzzzzzzzzzzzzz;
                M_alu_b = 16'bzzzzzzzzzzzzzzzz;
                M_alu_alufn = 6'bzzzzzz;
              end
            end
            if (ram_addr > 10'h3b7) begin
              M_state_d = GAMEOVER_state;
              M_vram_refresh_d = 1'h0;
              M_vram_refresh_ctr_d = 11'h4a6;
            end
            
            case (M_ram_read_q)
              1'h0: begin
                M_ram_read_d = 1'h1;
              end
              1'h1: begin
                M_previous_head_d = M_head_address_q;
                M_head_address_d = {M_disp_game_mem_read_data[10+5-:6], ram_addr[0+9-:10]};
                M_direction_d = {12'h000, M_direction_lut_travel_dir};
                M_state_d = COMPARE_STATE_state;
                M_input_counter_d = 1'h0;
                M_ram_read_d = 1'h0;
              end
            endcase
          end else begin
            M_input_counter_d = M_input_counter_q + 1'h1;
            M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
            M_alu_a = 16'bzzzzzzzzzzzzzzzz;
            M_alu_b = 16'bzzzzzzzzzzzzzzzz;
            M_alu_alufn = 6'bzzzzzz;
          end
        end
        COMPARE_STATE_state: begin
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 4'h9;
          ram_wr_en = 1'h0;
          vram_wr_en = 1'h0;
          if ((M_head_address_q[0+9-:10] >= 1'h0 && M_head_address_q[0+9-:10] <= 6'h21) && (M_direction_q == 4'h1)) begin
            M_state_d = GAMEOVER_state;
            M_vram_refresh_d = 1'h0;
            M_vram_refresh_ctr_d = 11'h4a6;
          end else begin
            if ((M_head_address_q[0+9-:10] >= 10'h396 && M_head_address_q[0+9-:10] <= 10'h3b7) && (M_direction_q == 4'h2)) begin
              M_state_d = GAMEOVER_state;
              M_vram_refresh_d = 1'h0;
              M_vram_refresh_ctr_d = 11'h4a6;
            end else begin
              if ((M_head_address_q[0+9-:10] - 6'h22 * (M_head_address_q[0+9-:10] / 6'h22) == 1'h0) && (M_direction_q == 4'h4)) begin
                M_state_d = GAMEOVER_state;
                M_vram_refresh_d = 1'h0;
                M_vram_refresh_ctr_d = 11'h4a6;
              end else begin
                if ((M_head_address_q[0+9-:10] - 6'h22 * (M_head_address_q[0+9-:10] / 6'h22) == 6'h21) && (M_direction_q == 4'h8)) begin
                  M_state_d = GAMEOVER_state;
                  M_vram_refresh_d = 1'h0;
                  M_vram_refresh_ctr_d = 11'h4a6;
                end else begin
                  if (M_head_address_q[14+1-:2] == 2'h0) begin
                    M_head_address_d = {6'h31, M_head_address_q[0+9-:10]};
                    M_keep_length_counter_d = 1'h0;
                    M_state_d = KEEP_LENGTH_state;
                  end else begin
                    if (M_head_address_q[14+1-:2] == 2'h1) begin
                      M_state_d = GROW_state;
                      M_ram_write_counter_d = 1'h0;
                    end else begin
                      M_state_d = GAMEOVER_state;
                      M_vram_refresh_d = 1'h0;
                      M_vram_refresh_ctr_d = 11'h4a6;
                    end
                  end
                end
              end
            end
          end
        end
        KEEP_LENGTH_state: begin
          sound_en = 1'h0;
          sound_type = 1'h0;
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 8'hf0;
          vram_wr_en = 1'h0;
          
          case (M_keep_length_counter_q)
            1'h0: begin
              ram_wr_en = 1'h0;
              ram_addr = M_tail_address_q[0+9-:10];
              M_vram_temp_reg_1_d = {6'h01, M_tail_address_q[0+9-:10]};
              M_vram_temp_reg_d[16+15-:16] = {6'h01, M_tail_address_q[0+9-:10]};
              M_keep_length_counter_d = 1'h1;
            end
            1'h1: begin
              ram_wr_en = 1'h1;
              ram_addr = M_tail_address_q[0+9-:10];
              M_tail_address_d = M_disp_game_mem_read_data;
              ram_wr_data = 1'h0;
              M_keep_length_counter_d = 2'h2;
            end
            2'h2: begin
              ram_wr_en = 1'h0;
              ram_addr = M_previous_head_q[0+9-:10];
              M_keep_length_counter_d = 2'h3;
            end
            2'h3: begin
              ram_wr_en = 1'h1;
              ram_addr = M_previous_head_q[0+9-:10];
              ram_wr_data = {6'h30, M_head_address_q[0+9-:10]};
              M_keep_length_counter_d = 3'h4;
            end
            3'h4: begin
              ram_wr_en = 1'h1;
              ram_addr = M_head_address_q[0+9-:10];
              ram_wr_data = 16'h3000;
              M_keep_length_counter_d = 1'h0;
              M_vram_temp_reg_0_d = M_head_address_q;
              M_vram_temp_reg_d[0+15-:16] = M_head_address_q;
              M_ram_write_counter_d = 1'h0;
              M_state_d = DRAW_START_state;
            end
          endcase
        end
        GROW_state: begin
          sound_en = 1'h1;
          sound_type = 3'h4;
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 4'hf;
          vram_wr_en = 1'h0;
          
          case (M_ram_write_counter_q)
            1'h0: begin
              M_snake_length_d = M_snake_length_q + 1'h1;
              ram_wr_en = 1'h1;
              ram_addr = M_head_address_q[0+9-:10];
              ram_wr_data = 16'hc400;
              M_ram_write_counter_d = 1'h1;
            end
            1'h1: begin
              ram_wr_en = 1'h1;
              ram_addr = M_previous_head_q[0+9-:10];
              ram_wr_data = {2'h3, 4'h1, M_head_address_q[0+9-:10]};
              M_ram_write_counter_d = 2'h2;
            end
            2'h2: begin
              ram_wr_en = 1'h0;
              M_vram_temp_reg_0_d = {2'h3, 4'h1, M_head_address_q[0+9-:10]};
              M_vram_temp_reg_d[0+15-:16] = {2'h3, 4'h1, M_head_address_q[0+9-:10]};
              M_score_d = M_score_q + 4'ha;
              M_state_d = GEN_FRUIT_state;
              M_random_num_d = M_random_num[0+9-:10];
              M_ram_write_counter_d = 1'h0;
              if (M_highscore_q <= M_score_q + 4'ha) begin
                M_highscore_d = M_score_q + 4'ha;
              end
            end
          endcase
        end
        GAMEOVER_state: begin
          sound_en = 1'h1;
          sound_type = 3'h5;
          M_direction_lut_dir_state = 16'bzzzzzzzzzzzzzzzz;
          M_alu_a = 16'bzzzzzzzzzzzzzzzz;
          M_alu_b = 16'bzzzzzzzzzzzzzzzz;
          M_alu_alufn = 6'bzzzzzz;
          M_debugreg_d = 8'haa;
          if (~M_vram_refresh_q) begin
            vram_wr_en = 1'h1;
            vram_wr_addr = M_vram_refresh_ctr_q;
            vram_wr_data = {8'h0c, OVER[(M_vram_refresh_ctr_q - 11'h4a6)*8+0+7-:8]};
            M_vram_refresh_ctr_d = M_vram_refresh_ctr_q + 1'h1;
            if (M_vram_refresh_ctr_q == 12'h4af) begin
              M_vram_refresh_d = 1'h1;
              M_vram_refresh_ctr_d = 1'h0;
            end
          end else begin
            vram_wr_en = 1'h0;
            vram_wr_addr = 1'h0;
            vram_wr_data = 1'h0;
          end
          if (left_button || right_button || up_button || down_button) begin
            sound_en = 1'h1;
            sound_type = 1'h1;
            M_state_d = START_SCREEN_state;
            M_vram_refresh_d = 1'h0;
            M_ram_clear_d = 1'h0;
            M_vram_refresh_ctr_d = 1'h0;
            M_ram_write_d = 1'h1;
            M_score_d = 1'h0;
          end
        end
        default: begin
          M_state_d = START_SCREEN_state;
          M_direction_lut_dir_state = {left_button, right_button, up_button, down_button, M_direction_q[0+3-:4]};
          M_alu_a = 16'h0000;
          M_alu_b = 16'h0000;
          M_alu_alufn = 6'h00;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_input_counter_q <= 1'h0;
      M_user_input_q <= 1'h0;
      M_head_address_q <= 1'h0;
      M_previous_head_q <= 1'h0;
      M_tail_address_q <= 1'h0;
      M_previous_tail_q <= 1'h0;
      M_block_state_q <= 1'h0;
      M_direction_q <= 1'h0;
      M_snake_length_q <= 1'h0;
      M_ram_clear_q <= 1'h0;
      M_ram_clear_counter_q <= 1'h0;
      M_ram_read_q <= 1'h0;
      M_ram_write_q <= 1'h0;
      M_ram_write_counter_q <= 1'h0;
      M_vram_refresh_q <= 1'h0;
      M_vram_temp_reg_0_q <= 1'h0;
      M_vram_temp_reg_1_q <= 1'h0;
      M_vram_temp_reg_2_q <= 1'h0;
      M_vram_temp_reg_3_q <= 1'h0;
      M_vram_temp_reg_8_q <= 1'h0;
      M_vram_temp_reg_q <= 1'h0;
      M_keep_length_counter_q <= 1'h0;
      M_vram_refresh_ctr_q <= 1'h0;
      M_score_q <= 1'h0;
      M_random_num_q <= 1'h0;
      M_calc_counter_q <= 1'h0;
      M_debug_read_ctr_q <= 1'h0;
      M_r1_q <= 1'h0;
      M_r2_q <= 1'h0;
      M_r3_q <= 1'h0;
      M_r4_q <= 1'h0;
      M_debugreg_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_input_counter_q <= M_input_counter_d;
      M_user_input_q <= M_user_input_d;
      M_head_address_q <= M_head_address_d;
      M_previous_head_q <= M_previous_head_d;
      M_tail_address_q <= M_tail_address_d;
      M_previous_tail_q <= M_previous_tail_d;
      M_block_state_q <= M_block_state_d;
      M_direction_q <= M_direction_d;
      M_snake_length_q <= M_snake_length_d;
      M_ram_clear_q <= M_ram_clear_d;
      M_ram_clear_counter_q <= M_ram_clear_counter_d;
      M_ram_read_q <= M_ram_read_d;
      M_ram_write_q <= M_ram_write_d;
      M_ram_write_counter_q <= M_ram_write_counter_d;
      M_vram_refresh_q <= M_vram_refresh_d;
      M_vram_temp_reg_0_q <= M_vram_temp_reg_0_d;
      M_vram_temp_reg_1_q <= M_vram_temp_reg_1_d;
      M_vram_temp_reg_2_q <= M_vram_temp_reg_2_d;
      M_vram_temp_reg_3_q <= M_vram_temp_reg_3_d;
      M_vram_temp_reg_8_q <= M_vram_temp_reg_8_d;
      M_vram_temp_reg_q <= M_vram_temp_reg_d;
      M_keep_length_counter_q <= M_keep_length_counter_d;
      M_vram_refresh_ctr_q <= M_vram_refresh_ctr_d;
      M_score_q <= M_score_d;
      M_random_num_q <= M_random_num_d;
      M_calc_counter_q <= M_calc_counter_d;
      M_debug_read_ctr_q <= M_debug_read_ctr_d;
      M_r1_q <= M_r1_d;
      M_r2_q <= M_r2_d;
      M_r3_q <= M_r3_d;
      M_r4_q <= M_r4_d;
      M_debugreg_q <= M_debugreg_d;
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (1'h0 == 1'b1) begin
      M_highscore_q <= 1'h0;
    end else begin
      M_highscore_q <= M_highscore_d;
    end
  end
  
endmodule
