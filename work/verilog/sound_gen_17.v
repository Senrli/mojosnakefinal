/*
   This file was generated automatically by Alchitry Labs version 1.1.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sound_gen_17 (
    input clk,
    input rst,
    input sound_en,
    input [2:0] sound_type,
    output reg [7:0] sound_out
  );
  
  
  
  reg [23:0] M_counter_d, M_counter_q = 1'h0;
  reg [23:0] M_time_delay_d, M_time_delay_q = 1'h0;
  reg [2:0] M_sound_type_reg_d, M_sound_type_reg_q = 1'h0;
  reg [24:0] M_sound_counter_d, M_sound_counter_q = 1'h0;
  
  always @* begin
    M_sound_counter_d = M_sound_counter_q;
    M_time_delay_d = M_time_delay_q;
    M_counter_d = M_counter_q;
    M_sound_type_reg_d = M_sound_type_reg_q;
    
    M_counter_d = M_counter_q + 1'h1;
    if (sound_en) begin
      M_time_delay_d = 20'hfffff;
      M_sound_type_reg_d = sound_type[0+2-:3];
    end
    if (M_time_delay_q > 1'h0) begin
      M_time_delay_d = M_time_delay_q - 1'h1;
    end else begin
      if (M_time_delay_q == 1'h0) begin
        M_counter_d = 1'h0;
      end
    end
    
    case (M_sound_type_reg_q)
      1'h1: begin
        sound_out[0+7-:8] = {4'h8{M_counter_q[14+0-:1]}};
      end
      2'h2: begin
        sound_out[0+7-:8] = M_counter_q[7+7-:8];
      end
      2'h3: begin
        sound_out[0+7-:8] = {4'h8{M_counter_q[14+0-:1]}} ^ M_counter_q[6+7-:8];
      end
      3'h4: begin
        M_sound_counter_d = M_sound_counter_q + 1'h1;
        if (M_sound_counter_q < 25'h17d7840) begin
          if (M_sound_counter_q < 23'h7f2815) begin
            if (M_counter_q == 17'h1e847) begin
              M_counter_d = 1'h0;
            end
          end else begin
            if (M_sound_counter_q < 24'hfe502a) begin
              if (M_counter_q == 16'hf423) begin
                M_counter_d = 1'h0;
              end
            end else begin
              if (M_sound_counter_q < 25'h17d7840) begin
                if (M_counter_q == 16'ha2c1) begin
                  M_counter_d = 1'h0;
                end
              end
            end
          end
        end
        sound_out[0+7-:8] = M_counter_q[7+7-:8];
      end
      3'h5: begin
        M_sound_counter_d = M_sound_counter_q + 1'h1;
        if (M_sound_counter_q < 25'h17d7840) begin
          if (M_sound_counter_q < 23'h7f2815) begin
            if (M_counter_q == 16'ha2c1) begin
              M_counter_d = 1'h0;
            end
          end else begin
            if (M_sound_counter_q < 24'hfe502a) begin
              if (M_counter_q == 16'hf423) begin
                M_counter_d = 1'h0;
              end
            end else begin
              if (M_sound_counter_q < 25'h17d7840) begin
                if (M_counter_q == 17'h1e847) begin
                  M_counter_d = 1'h0;
                end
              end
            end
          end
        end
        sound_out[0+7-:8] = M_counter_q[7+7-:8];
      end
      default: begin
        sound_out[0+7-:8] = {4'h8{M_counter_q[14+0-:1]}};
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_time_delay_q <= 1'h0;
      M_sound_type_reg_q <= 1'h0;
      M_sound_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_time_delay_q <= M_time_delay_d;
      M_sound_type_reg_q <= M_sound_type_reg_d;
      M_sound_counter_q <= M_sound_counter_d;
    end
  end
  
endmodule
