/*
   This file was generated automatically by Alchitry Labs version 1.1.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module vga_cga_8 (
    input rst,
    input clk,
    input wr_en,
    input [11:0] wr_addr,
    input [15:0] wr_data,
    output reg [7:0] r,
    output reg [7:0] g,
    output reg [7:0] b,
    output reg o_hs,
    output reg o_vs,
    output reg o_blk,
    output reg o_clk
  );
  
  
  
  wire [1-1:0] M_oddr_Q;
  reg [1-1:0] M_oddr_D0;
  reg [1-1:0] M_oddr_D1;
  reg [1-1:0] M_oddr_C0;
  reg [1-1:0] M_oddr_C1;
  reg [1-1:0] M_oddr_CE;
  reg [1-1:0] M_oddr_R;
  reg [1-1:0] M_oddr_S;
  ODDR2 #(.DDR_ALIGNMENT("NONE"), .INIT(0), .SRTYPE("SYNC")) oddr (
    .D0(M_oddr_D0),
    .D1(M_oddr_D1),
    .C0(M_oddr_C0),
    .C1(M_oddr_C1),
    .CE(M_oddr_CE),
    .R(M_oddr_R),
    .S(M_oddr_S),
    .Q(M_oddr_Q)
  );
  
  reg [11:0] scan_addr;
  
  localparam HS_STA = 5'h10;
  
  localparam HS_END = 8'h70;
  
  localparam HA_STA = 9'h0a0;
  
  localparam VS_STA = 10'h1ea;
  
  localparam VS_END = 11'h1ec;
  
  localparam VA_END = 9'h1e0;
  
  localparam LINE = 10'h320;
  
  localparam SCREEN = 10'h20d;
  
  reg [0:0] M_vga_ctr_d, M_vga_ctr_q = 1'h0;
  reg [9:0] M_h_count_d, M_h_count_q = 1'h0;
  reg [9:0] M_v_count_d, M_v_count_q = 1'h0;
  reg [25:0] M_char_disp_delay_ctr_d, M_char_disp_delay_ctr_q = 1'h0;
  reg [7:0] M_char_disp_ctr_d, M_char_disp_ctr_q = 1'h0;
  
  reg [11:0] rd_addr;
  
  reg [7:0] rd_data;
  
  reg [9:0] o_x;
  
  reg [8:0] o_y;
  
  reg [2:0] char_x;
  
  reg [3:0] char_y;
  
  reg [4:0] char_row;
  
  reg [6:0] char_col;
  
  reg r_fg;
  
  reg r_bg;
  
  reg g_fg;
  
  reg g_bg;
  
  reg b_fg;
  
  reg b_bg;
  
  reg bright_fg;
  
  reg bright_bg;
  
  reg [1:0] r_intensity;
  
  reg [1:0] g_intensity;
  
  reg [1:0] b_intensity;
  
  wire [16-1:0] M_vram_out_char;
  vram_cga_20 vram (
    .clk(clk),
    .rst(rst),
    .read_addr(rd_addr),
    .write_en(wr_en),
    .write_addr(wr_addr),
    .write_data(wr_data),
    .out_char(M_vram_out_char)
  );
  
  wire [1-1:0] M_rom_row_of_pixels;
  reg [8-1:0] M_rom_ascii_code;
  vga_0816_rom_21 rom (
    .row(char_y),
    .col(char_x),
    .ascii_code(M_rom_ascii_code),
    .row_of_pixels(M_rom_row_of_pixels)
  );
  
  wire [8-1:0] M_cga_color_lut_r_cga_out;
  wire [8-1:0] M_cga_color_lut_g_cga_out;
  wire [8-1:0] M_cga_color_lut_b_cga_out;
  reg [1-1:0] M_cga_color_lut_r;
  reg [1-1:0] M_cga_color_lut_g;
  reg [1-1:0] M_cga_color_lut_b;
  reg [1-1:0] M_cga_color_lut_bright;
  cga_color_lut_22 cga_color_lut (
    .r(M_cga_color_lut_r),
    .g(M_cga_color_lut_g),
    .b(M_cga_color_lut_b),
    .bright(M_cga_color_lut_bright),
    .r_cga_out(M_cga_color_lut_r_cga_out),
    .g_cga_out(M_cga_color_lut_g_cga_out),
    .b_cga_out(M_cga_color_lut_b_cga_out)
  );
  
  always @* begin
    M_char_disp_delay_ctr_d = M_char_disp_delay_ctr_q;
    M_h_count_d = M_h_count_q;
    M_vga_ctr_d = M_vga_ctr_q;
    M_v_count_d = M_v_count_q;
    M_char_disp_ctr_d = M_char_disp_ctr_q;
    
    M_oddr_C0 = clk;
    M_oddr_C1 = ~clk;
    M_oddr_CE = 1'h1;
    M_oddr_D0 = 1'h0;
    M_oddr_D1 = 1'h1;
    M_oddr_R = 1'h0;
    M_oddr_S = 1'h0;
    r_fg = M_vram_out_char[10+0-:1];
    r_bg = M_vram_out_char[14+0-:1];
    g_fg = M_vram_out_char[9+0-:1];
    g_bg = M_vram_out_char[13+0-:1];
    b_fg = M_vram_out_char[8+0-:1];
    b_bg = M_vram_out_char[12+0-:1];
    bright_fg = M_vram_out_char[11+0-:1];
    bright_bg = M_vram_out_char[15+0-:1];
    r_intensity = {(~M_rom_row_of_pixels) & r_bg & bright_bg | M_rom_row_of_pixels & r_fg & bright_fg, (~M_rom_row_of_pixels) & r_bg | M_rom_row_of_pixels & r_fg};
    g_intensity = {(~M_rom_row_of_pixels) & g_bg & bright_bg | M_rom_row_of_pixels & g_fg & bright_fg, (~M_rom_row_of_pixels) & g_bg | M_rom_row_of_pixels & g_fg};
    b_intensity = {(~M_rom_row_of_pixels) & b_bg & bright_bg | M_rom_row_of_pixels & b_fg & bright_fg, (~M_rom_row_of_pixels) & b_bg | M_rom_row_of_pixels & b_fg};
    o_clk = M_oddr_Q;
    M_vga_ctr_d = M_vga_ctr_q + 1'h1;
    M_char_disp_delay_ctr_d = M_char_disp_delay_ctr_q + 1'h1;
    if (M_char_disp_delay_ctr_q == 26'h2faf080) begin
      M_char_disp_ctr_d = M_char_disp_ctr_q + 1'h1;
    end
    if (1'h1) begin
      if (M_h_count_q == 11'h31f) begin
        M_h_count_d = 1'h0;
        M_v_count_d = M_v_count_q + 1'h1;
      end else begin
        M_h_count_d = M_h_count_q + 1'h1;
      end
      if (M_v_count_q == 11'h20c) begin
        M_v_count_d = 1'h0;
      end
    end
    o_hs = ~((M_h_count_q >= 5'h10) & (M_h_count_q < 8'h70));
    o_vs = ~((M_v_count_q >= 10'h1ea) & (M_v_count_q < 11'h1ec));
    o_x = (M_h_count_q < 9'h0a0) ? 1'h0 : (M_h_count_q - 9'h0a0);
    o_y = (M_v_count_q >= 9'h1e0) ? 10'h1df : (M_v_count_q);
    o_blk = M_h_count_q >= 9'h0a0;
    char_row = o_y / 5'h10;
    char_col = o_x / 4'h8;
    char_y = o_y - char_row * 5'h10;
    char_x = o_x - char_col * 4'h8 - 1'h1;
    scan_addr = char_row * 7'h50 + char_col;
    rd_addr = char_row * 7'h50 + char_col;
    M_rom_ascii_code = M_vram_out_char[0+7-:8];
    if (M_h_count_q < 9'h0a0 || M_v_count_q >= 9'h1e0) begin
      r = 8'h00;
      g = 8'h00;
      b = 8'h00;
    end else begin
      if (M_rom_row_of_pixels) begin
        M_cga_color_lut_r = r_fg;
        M_cga_color_lut_g = g_fg;
        M_cga_color_lut_b = b_fg;
        M_cga_color_lut_bright = bright_fg;
      end else begin
        M_cga_color_lut_r = r_bg;
        M_cga_color_lut_g = g_bg;
        M_cga_color_lut_b = b_bg;
        M_cga_color_lut_bright = bright_bg;
      end
      r = M_cga_color_lut_r_cga_out;
      g = M_cga_color_lut_g_cga_out;
      b = M_cga_color_lut_b_cga_out;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_vga_ctr_q <= 1'h0;
      M_h_count_q <= 1'h0;
      M_v_count_q <= 1'h0;
      M_char_disp_delay_ctr_q <= 1'h0;
      M_char_disp_ctr_q <= 1'h0;
    end else begin
      M_vga_ctr_q <= M_vga_ctr_d;
      M_h_count_q <= M_h_count_d;
      M_v_count_q <= M_v_count_d;
      M_char_disp_delay_ctr_q <= M_char_disp_delay_ctr_d;
      M_char_disp_ctr_q <= M_char_disp_ctr_d;
    end
  end
  
endmodule
