/*
   This file was generated automatically by Alchitry Labs version 1.1.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [7:0] vga_r,
    output reg [7:0] vga_g,
    output reg [7:0] vga_b,
    output reg vga_hsync,
    output reg vga_vsync,
    output reg vga_blk,
    output reg vga_clk,
    input b_up_a,
    input b_up_b,
    input b_down_a,
    input b_down_b,
    input b_left_a,
    input b_left_b,
    input b_right_a,
    input b_right_b,
    output reg [7:0] sound_out,
    input ps2_user1_clk,
    input ps2_user1_data,
    input ps2_user2_clk,
    input ps2_user2_data,
    output reg [7:0] led_key
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_clkgen_clk_50;
  wire [1-1:0] M_clkgen_clk_25;
  wire [1-1:0] M_clkgen_clk_10;
  clk_divider clkgen (
    .clk_in(clk),
    .clk_50(M_clkgen_clk_50),
    .clk_25(M_clkgen_clk_25),
    .clk_10(M_clkgen_clk_10)
  );
  
  reg debug_en;
  
  reg debug_wr_en;
  
  reg [9:0] debug_addr;
  
  reg [15:0] debug_write_data;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(M_clkgen_clk_25),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_b_up_a_button_out;
  button_conditioner_2 b_up_a_button (
    .clk(M_clkgen_clk_25),
    .in(b_up_a),
    .out(M_b_up_a_button_out)
  );
  wire [1-1:0] M_b_up_b_button_out;
  button_conditioner_2 b_up_b_button (
    .clk(M_clkgen_clk_25),
    .in(b_up_b),
    .out(M_b_up_b_button_out)
  );
  wire [1-1:0] M_b_down_a_button_out;
  button_conditioner_2 b_down_a_button (
    .clk(M_clkgen_clk_25),
    .in(b_down_a),
    .out(M_b_down_a_button_out)
  );
  wire [1-1:0] M_b_down_b_button_out;
  button_conditioner_2 b_down_b_button (
    .clk(M_clkgen_clk_25),
    .in(b_down_b),
    .out(M_b_down_b_button_out)
  );
  wire [1-1:0] M_b_left_a_button_out;
  button_conditioner_2 b_left_a_button (
    .clk(M_clkgen_clk_25),
    .in(b_left_a),
    .out(M_b_left_a_button_out)
  );
  wire [1-1:0] M_b_left_b_button_out;
  button_conditioner_2 b_left_b_button (
    .clk(M_clkgen_clk_25),
    .in(b_left_b),
    .out(M_b_left_b_button_out)
  );
  wire [1-1:0] M_b_right_a_button_out;
  button_conditioner_2 b_right_a_button (
    .clk(M_clkgen_clk_25),
    .in(b_right_a),
    .out(M_b_right_a_button_out)
  );
  wire [1-1:0] M_b_right_b_button_out;
  button_conditioner_2 b_right_b_button (
    .clk(M_clkgen_clk_25),
    .in(b_right_b),
    .out(M_b_right_b_button_out)
  );
  wire [1-1:0] M_b_up_a_edge_out;
  edge_detector_3 b_up_a_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_up_a_button_out),
    .out(M_b_up_a_edge_out)
  );
  wire [1-1:0] M_b_up_b_edge_out;
  edge_detector_3 b_up_b_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_up_b_button_out),
    .out(M_b_up_b_edge_out)
  );
  wire [1-1:0] M_b_down_a_edge_out;
  edge_detector_3 b_down_a_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_down_a_button_out),
    .out(M_b_down_a_edge_out)
  );
  wire [1-1:0] M_b_down_b_edge_out;
  edge_detector_3 b_down_b_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_down_b_button_out),
    .out(M_b_down_b_edge_out)
  );
  wire [1-1:0] M_b_left_a_edge_out;
  edge_detector_3 b_left_a_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_left_a_button_out),
    .out(M_b_left_a_edge_out)
  );
  wire [1-1:0] M_b_left_b_edge_out;
  edge_detector_3 b_left_b_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_left_b_button_out),
    .out(M_b_left_b_edge_out)
  );
  wire [1-1:0] M_b_right_a_edge_out;
  edge_detector_3 b_right_a_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_right_a_button_out),
    .out(M_b_right_a_edge_out)
  );
  wire [1-1:0] M_b_right_b_edge_out;
  edge_detector_3 b_right_b_edge (
    .clk(M_clkgen_clk_25),
    .in(M_b_right_b_button_out),
    .out(M_b_right_b_edge_out)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_4 avr (
    .clk(M_clkgen_clk_25),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [8-1:0] M_register_tx_data;
  wire [1-1:0] M_register_new_tx_data;
  wire [66-1:0] M_register_regOut;
  reg [8-1:0] M_register_rx_data;
  reg [1-1:0] M_register_new_rx_data;
  reg [1-1:0] M_register_tx_busy;
  reg [33-1:0] M_register_regIn;
  reg_interface_5 register (
    .clk(M_clkgen_clk_25),
    .rst(rst),
    .rx_data(M_register_rx_data),
    .new_rx_data(M_register_new_rx_data),
    .tx_busy(M_register_tx_busy),
    .regIn(M_register_regIn),
    .tx_data(M_register_tx_data),
    .new_tx_data(M_register_new_tx_data),
    .regOut(M_register_regOut)
  );
  
  wire [8-1:0] M_ps2_user1_ps2_byte;
  wire [1-1:0] M_ps2_user1_ps2_state;
  verilog_keyboard_6 ps2_user1 (
    .clk(M_clkgen_clk_25),
    .rst_n(rst),
    .ps2k_clk(ps2_user1_clk),
    .ps2k_data(ps2_user1_data),
    .ps2_byte(M_ps2_user1_ps2_byte),
    .ps2_state(M_ps2_user1_ps2_state)
  );
  
  wire [8-1:0] M_ps2_user2_ps2_byte;
  wire [1-1:0] M_ps2_user2_ps2_state;
  verilog_keyboard_6 ps2_user2 (
    .clk(M_clkgen_clk_25),
    .rst_n(rst),
    .ps2k_clk(ps2_user2_clk),
    .ps2k_data(ps2_user2_data),
    .ps2_byte(M_ps2_user2_ps2_byte),
    .ps2_state(M_ps2_user2_ps2_state)
  );
  
  wire [1-1:0] M_snake_vram_wr_en;
  wire [12-1:0] M_snake_vram_wr_addr;
  wire [16-1:0] M_snake_vram_wr_data;
  wire [16-1:0] M_snake_debug_read_data;
  wire [1-1:0] M_snake_debug_read_ready;
  wire [8-1:0] M_snake_debugled;
  wire [1-1:0] M_snake_sound_out;
  snake_fsm_7 snake (
    .rst(rst),
    .clk(M_clkgen_clk_25),
    .left_button(M_b_left_a_edge_out),
    .right_button(M_b_right_a_edge_out),
    .up_button(M_b_up_a_edge_out),
    .down_button(M_b_down_a_edge_out),
    .debug_en(debug_en),
    .debug_wr_en(debug_wr_en),
    .debug_addr(debug_addr),
    .debug_write_data(debug_write_data),
    .user1_inputdata(M_ps2_user1_ps2_byte),
    .user1_newinput(M_ps2_user1_ps2_state),
    .user2_inputdata(M_ps2_user2_ps2_byte),
    .user2_newinput(M_ps2_user2_ps2_state),
    .vram_wr_en(M_snake_vram_wr_en),
    .vram_wr_addr(M_snake_vram_wr_addr),
    .vram_wr_data(M_snake_vram_wr_data),
    .debug_read_data(M_snake_debug_read_data),
    .debug_read_ready(M_snake_debug_read_ready),
    .debugled(M_snake_debugled),
    .sound_out(M_snake_sound_out)
  );
  
  wire [8-1:0] M_vga_r;
  wire [8-1:0] M_vga_g;
  wire [8-1:0] M_vga_b;
  wire [1-1:0] M_vga_o_hs;
  wire [1-1:0] M_vga_o_vs;
  wire [1-1:0] M_vga_o_blk;
  wire [1-1:0] M_vga_o_clk;
  vga_cga_8 vga (
    .rst(rst),
    .clk(M_clkgen_clk_25),
    .wr_en(M_snake_vram_wr_en),
    .wr_addr(M_snake_vram_wr_addr),
    .wr_data(M_snake_vram_wr_data),
    .r(M_vga_r),
    .g(M_vga_g),
    .b(M_vga_b),
    .o_hs(M_vga_o_hs),
    .o_vs(M_vga_o_vs),
    .o_blk(M_vga_o_blk),
    .o_clk(M_vga_o_clk)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_channel = 4'hf;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_register_rx_data = M_avr_rx_data;
    M_register_new_rx_data = M_avr_new_rx_data;
    M_avr_tx_data = M_register_tx_data;
    M_avr_new_tx_data = M_register_new_tx_data;
    M_register_tx_busy = M_avr_tx_busy;
    M_register_regIn[32+0-:1] = 1'h0;
    M_register_regIn[0+31-:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    if (M_register_regOut[0+0-:1]) begin
      if (M_register_regOut[1+0-:1]) begin
        debug_en = 1'h1;
        debug_wr_en = 1'h1;
        debug_addr = M_register_regOut[2+0+9-:10];
        debug_write_data = M_register_regOut[34+0+15-:16];
      end else begin
        debug_en = 1'h1;
        debug_wr_en = 1'h0;
        M_register_regIn[0+31-:32] = M_snake_debug_read_data;
        M_register_regIn[32+0-:1] = M_snake_debug_read_ready;
      end
    end else begin
      debug_en = 1'h0;
    end
    vga_r = M_vga_r;
    vga_g = M_vga_g;
    vga_b = M_vga_b;
    vga_hsync = M_vga_o_hs;
    vga_vsync = M_vga_o_vs;
    vga_blk = M_vga_o_blk;
    vga_clk = M_vga_o_clk;
    led = M_snake_debugled;
    sound_out = M_snake_sound_out;
    led_key = {M_ps2_user1_ps2_state, M_ps2_user2_ps2_state};
  end
endmodule
